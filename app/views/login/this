- require 'json'

- return_val = Login.labelled(session[:token])
- @project_xmls = return_val[0]
- @labels = return_val[1]
- @project_stories = return_val[2]
- @positions = return_val[3]
- @x_arr = []
- @l_arr = []
- @label_count = 0

%div.code#tab-container
  - tab_count = 0
  - @labels.each do |label|
    - tab_count += 1
    %div{:id => "tab_#{tab_count}", :class => "label_tab hover pointer"}= label.titleize

%div.clearBoth
%table.collapse
  %tbody.ui-widget-ui-widget-content
    %tr
      = render :partial => ('login/dash_items')
  
:javascript
  var connectSort = new Array(#{@x_arr.size});
  connectSort = #{@x_arr.to_json};
  var labelHide = new Array(#{@l_arr.size});
  labelHide = #{@l_arr.to_json};
  
  var token = #{session[:token].to_json}
  var time;
  function tweeter(item,time){
    $.ajax({
      type: "GET",
      url: "#{@root_url}/tweet?message="+ " Updated this " +item.attr("type").toString()+ ": " +item.attr("title").toString()+ " (#{time} " +time+ ")"
    });
  }
  
  $(document).ready(function(){
    $(connectSort).each(function(index, obj){
      $("." + this).sortable({
        connectWith: ".connectedSortable_" + this,
        cancel: '.state-disabled',
        revert: true,
        stop: function(event, ui){
        
          var prevPos = parseInt (ui.item.prevAll().attr("pos"));
          var nextPos = parseInt (ui.item.nextAll().attr("pos"));
          var params, data, uri;
          var move, target;
          var xhr = new XMLHttpRequest;
          
          if (isNaN(prevPos)){
            move= 'before';
            target = ui.item.nextAll().attr('story_id');
          } else {
            move = 'after';
            target = ui.item.prevAll().attr('story_id');
          }
          
          params = { 'move[move]' : move, 'move[target]' : target };
          params['activity[label]'] = ui.item.attr('label');
          
          data = $.extend({}, {_method: 'PUT', project_id: ui.item.attr('project_id')}, params);
                    
          $.ajax({
            type: 'POST',
            //url: 'http://www.pivotaltracker.com/services/v3/projects/' + ui.item.attr('project_id') + '/stories/' + ui.item.attr('story_id'),
                   //+ '/moves?'move\[move\]=' + move + '&move\[target\]=' + target,
            url: 'http://cold.heroku.com/dash',
            dataType: 'json',
            data: data,
            success: function (data) {
              alert('success!');
            },
            error: function () {
              alert('error!');
            }
          });
          
          //curl -H "X-TrackerToken: ee480e8fb88013226a0f5da031a93ae8" 
          //-X POST  "http://www.pivotaltracker.com/services/v3/projects/77428/stories/3348776/moves?move\[move\]=before&move\[target\]=3348753" 
          //-d "move[move]=after&move[target]=3348753";
          
          time = settime();
          //tweeter(ui.item, time);     
        }
      }).disableSelection();
    });

    $(document).ajaxSend(function(event, request, settings) {
      if (settings.type == 'GET' || settings.type == 'get') return;
      
      settings.data = settings.data || "";
      settings.
      data += (settings.data ? "&" : "") + "authencity_token=" + encodeURIComponent(token);
    });
      
    $(function(){
      $('.post').restForm('POST', {auth_token : token });
      $('.delete').restForm('DELETE', {auth_token : token });
    })
    
    //show/hide labels
    $('.ui-icon-circle-close').showHideFunc();
    
    //show/hide labels cookies
    $(labelHide).showHideCookies();
  });
